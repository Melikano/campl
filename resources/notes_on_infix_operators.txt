
------------------------------------------------
USAGE
------------------------------------------------

Infix operators are operators that are placed between the things they operate on.
For example:

	fun (++) =
		[],c -> c
		b:bs,c -> b:(bs ++ c)

Infix operators are declared like normal functions, but the name is surrounded by brackets:
(naming discussed later)

	fun (name) =
		...

Infix operators can have an explicit type, but they must take exactly 2 parameters (failure to do so produces a parsing error)

To use a user-defined infix operator, use it like any other infix operator:

	"abc" ++ "def"

Or, use it in a 'sectioned' form:

	(++)("abc","def")

Any user-defined or inbuilt infix operator can be sectioned.

------------------------------------------------
ORDER OF OPERATIONS:
------------------------------------------------

Infix operators have the same precedence as the built-in operator corresponding to their starting symbol.
Below is a list of every infix operator. Each line represents a precedence.
All operators except the '^' row are left-associative.

    User-defined starting with:          Built-in
    |
    &
    > < !                               == >= <= <       (not implemented: '>' '/=')
    + -                                 + -
    * / %                               * /
    ^ (NOTE: right-associative)

operators closer to the bottom bind more tightly.

------------------------------------------------
Naming:
------------------------------------------------

An infix operator name must start with one of the aforementioned symbols,
and may optionally be followed by sequence containing any of the following characters: (no letters or numbers)

    @ # $ _ ? | : ~ = | & < > ! + - * / % ^

Please note that an infix token may not start with '|=', as this would cause an issue with the tokenizer.
Also note that custom-defined infix operators cannot override built-in tokens, which include:

    + - * / <= >= /= |

Attempting to create such infix operators will produce a syntax error, as these are reserved-words in the language.