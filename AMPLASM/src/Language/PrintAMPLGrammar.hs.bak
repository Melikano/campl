{-# LANGUAGE CPP #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif
{-# LANGUAGE FlexibleInstances #-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for Language.
--   Generated by the BNF converter.

module Language.PrintAMPLGrammar where

import qualified Language.AbsAMPLGrammar
import Data.Char

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else ' ':s)

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print Language.AbsAMPLGrammar.Store where
  prt _ (Language.AbsAMPLGrammar.Store (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.Load where
  prt _ (Language.AbsAMPLGrammar.Load (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.Ret where
  prt _ (Language.AbsAMPLGrammar.Ret (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.Call where
  prt _ (Language.AbsAMPLGrammar.Call (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.ConstInt where
  prt _ (Language.AbsAMPLGrammar.ConstInt (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.ConstChar where
  prt _ (Language.AbsAMPLGrammar.ConstChar (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.ConstString where
  prt _ (Language.AbsAMPLGrammar.ConstString (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.ToStr where
  prt _ (Language.AbsAMPLGrammar.ToStr (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.ToInt where
  prt _ (Language.AbsAMPLGrammar.ToInt (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.And where
  prt _ (Language.AbsAMPLGrammar.And (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.Or where
  prt _ (Language.AbsAMPLGrammar.Or (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.Append where
  prt _ (Language.AbsAMPLGrammar.Append (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.Unstring where
  prt _ (Language.AbsAMPLGrammar.Unstring (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.LeqI where
  prt _ (Language.AbsAMPLGrammar.LeqI (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.EqI where
  prt _ (Language.AbsAMPLGrammar.EqI (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.Leqc where
  prt _ (Language.AbsAMPLGrammar.Leqc (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.Eqc where
  prt _ (Language.AbsAMPLGrammar.Eqc (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.Leqs where
  prt _ (Language.AbsAMPLGrammar.Leqs (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.Eqs where
  prt _ (Language.AbsAMPLGrammar.Eqs (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.ConcatS where
  prt _ (Language.AbsAMPLGrammar.ConcatS (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.Add where
  prt _ (Language.AbsAMPLGrammar.Add (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.Subtract where
  prt _ (Language.AbsAMPLGrammar.Subtract (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.Mul where
  prt _ (Language.AbsAMPLGrammar.Mul (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.Quot where
  prt _ (Language.AbsAMPLGrammar.Quot (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.Rem where
  prt _ (Language.AbsAMPLGrammar.Rem (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.Cons where
  prt _ (Language.AbsAMPLGrammar.Cons (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.Case where
  prt _ (Language.AbsAMPLGrammar.Case (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.If where
  prt _ (Language.AbsAMPLGrammar.If (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.Rec where
  prt _ (Language.AbsAMPLGrammar.Rec (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.Get where
  prt _ (Language.AbsAMPLGrammar.Get (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.Put where
  prt _ (Language.AbsAMPLGrammar.Put (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.Hput where
  prt _ (Language.AbsAMPLGrammar.Hput (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.Hcase where
  prt _ (Language.AbsAMPLGrammar.Hcase (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.Split where
  prt _ (Language.AbsAMPLGrammar.Split (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.Fork where
  prt _ (Language.AbsAMPLGrammar.Fork (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.Plug where
  prt _ (Language.AbsAMPLGrammar.Plug (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.Run where
  prt _ (Language.AbsAMPLGrammar.Run (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.Race where
  prt _ (Language.AbsAMPLGrammar.Race (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.Close where
  prt _ (Language.AbsAMPLGrammar.Close (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.Halt where
  prt _ (Language.AbsAMPLGrammar.Halt (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.Ch_Id where
  prt _ (Language.AbsAMPLGrammar.Ch_Id (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.Main_run where
  prt _ (Language.AbsAMPLGrammar.Main_run (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.True where
  prt _ (Language.AbsAMPLGrammar.True (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.False where
  prt _ (Language.AbsAMPLGrammar.False (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.Character where
  prt _ (Language.AbsAMPLGrammar.Character (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.UIdent where
  prt _ (Language.AbsAMPLGrammar.UIdent (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.PIdent where
  prt _ (Language.AbsAMPLGrammar.PIdent (_,i)) = doc (showString i)
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print Language.AbsAMPLGrammar.PInteger where
  prt _ (Language.AbsAMPLGrammar.PInteger (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.IIdent where
  prt _ (Language.AbsAMPLGrammar.IIdent (_,i)) = doc (showString i)

instance Print Language.AbsAMPLGrammar.AMPLCODE where
  prt i e = case e of
    Language.AbsAMPLGrammar.Main amplconstructss start -> prPrec i 0 (concatD [prt 0 amplconstructss, prt 0 start])

instance Print Language.AbsAMPLGrammar.AMPL_CONSTRUCTS where
  prt i e = case e of
    Language.AbsAMPLGrammar.IMPORT_CONSTRUCT import_ -> prPrec i 0 (concatD [prt 0 import_])
    Language.AbsAMPLGrammar.HANDLE_CONSTRUCT handles -> prPrec i 0 (concatD [prt 0 handles])
    Language.AbsAMPLGrammar.COHANDLE_CONSTRUCT cohandles -> prPrec i 0 (concatD [prt 0 cohandles])
    Language.AbsAMPLGrammar.CONSTRUCTOR_CONSTRUCT constructors -> prPrec i 0 (concatD [prt 0 constructors])
    Language.AbsAMPLGrammar.DESTRUCTOR_CONSTRUCT destructors -> prPrec i 0 (concatD [prt 0 destructors])
    Language.AbsAMPLGrammar.PROCESSES_CONSTRUCT processes -> prPrec i 0 (concatD [prt 0 processes])
    Language.AbsAMPLGrammar.FUNCTIONS_CONSTRUCT functions -> prPrec i 0 (concatD [prt 0 functions])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [Language.AbsAMPLGrammar.AMPL_CONSTRUCTS] where
  prt = prtList

instance Print Language.AbsAMPLGrammar.HANDLE_SPEC where
  prt i e = case e of
    Language.AbsAMPLGrammar.Hand_spec uident handles -> prPrec i 0 (concatD [prt 0 uident, doc (showString "="), doc (showString "{"), prt 0 handles, doc (showString "}")])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print Language.AbsAMPLGrammar.Handle where
  prt i e = case e of
    Language.AbsAMPLGrammar.HandName uident -> prPrec i 0 (concatD [prt 0 uident])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print [Language.AbsAMPLGrammar.HANDLE_SPEC] where
  prt = prtList

instance Print [Language.AbsAMPLGrammar.Handle] where
  prt = prtList

instance Print Language.AbsAMPLGrammar.IMPORT where
  prt i e = case e of
    Language.AbsAMPLGrammar.Import iident -> prPrec i 0 (concatD [doc (showString "%include"), prt 0 iident])

instance Print Language.AbsAMPLGrammar.CONSTRUCTORS where
  prt i e = case e of
    Language.AbsAMPLGrammar.Constructors structorspecs -> prPrec i 0 (concatD [doc (showString "%constructors"), doc (showString ":"), doc (showString "{"), prt 0 structorspecs, doc (showString "}")])

instance Print Language.AbsAMPLGrammar.DESTRUCTORS where
  prt i e = case e of
    Language.AbsAMPLGrammar.Destructors structorspecs -> prPrec i 0 (concatD [doc (showString "%destructors"), doc (showString ":"), doc (showString "{"), prt 0 structorspecs, doc (showString "}")])

instance Print Language.AbsAMPLGrammar.STRUCTOR_SPEC where
  prt i e = case e of
    Language.AbsAMPLGrammar.Struct_spec uident structs -> prPrec i 0 (concatD [prt 0 uident, doc (showString "="), doc (showString "{"), prt 0 structs, doc (showString "}")])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print Language.AbsAMPLGrammar.STRUCT where
  prt i e = case e of
    Language.AbsAMPLGrammar.Struct uident pinteger -> prPrec i 0 (concatD [prt 0 uident, prt 0 pinteger])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print [Language.AbsAMPLGrammar.STRUCTOR_SPEC] where
  prt = prtList

instance Print [Language.AbsAMPLGrammar.STRUCT] where
  prt = prtList

instance Print Language.AbsAMPLGrammar.HANDLES where
  prt i e = case e of
    Language.AbsAMPLGrammar.Handles handlespecs -> prPrec i 0 (concatD [doc (showString "%handles"), doc (showString ":"), doc (showString "{"), prt 0 handlespecs, doc (showString "}")])

instance Print Language.AbsAMPLGrammar.COHANDLES where
  prt i e = case e of
    Language.AbsAMPLGrammar.Cohandles handlespecs -> prPrec i 0 (concatD [doc (showString "%cohandles"), doc (showString ":"), doc (showString "{"), prt 0 handlespecs, doc (showString "}")])

instance Print Language.AbsAMPLGrammar.PROCESSES where
  prt i e = case e of
    Language.AbsAMPLGrammar.Processes processspecs -> prPrec i 0 (concatD [doc (showString "%processes"), doc (showString ":"), doc (showString "{"), prt 0 processspecs, doc (showString "}")])

instance Print [Language.AbsAMPLGrammar.PROCESS_SPEC] where
  prt = prtList

instance Print Language.AbsAMPLGrammar.PROCESS_SPEC where
  prt i e = case e of
    Language.AbsAMPLGrammar.Process_spec pident varss pidents1 pidents2 coms -> prPrec i 0 (concatD [prt 0 pident, doc (showString "("), prt 0 varss, doc (showString "|"), prt 0 pidents1, doc (showString "=>"), prt 0 pidents2, doc (showString ")"), doc (showString "="), prt 0 coms])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print Language.AbsAMPLGrammar.Vars where
  prt i e = case e of
    Language.AbsAMPLGrammar.VName pident -> prPrec i 0 (concatD [prt 0 pident])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [Language.AbsAMPLGrammar.Vars] where
  prt = prtList

instance Print Language.AbsAMPLGrammar.FUNCTIONS where
  prt i e = case e of
    Language.AbsAMPLGrammar.Functions functionspecs -> prPrec i 0 (concatD [doc (showString "%functions"), doc (showString ":"), doc (showString "{"), prt 0 functionspecs, doc (showString "}")])

instance Print [Language.AbsAMPLGrammar.FUNCTION_SPEC] where
  prt = prtList

instance Print Language.AbsAMPLGrammar.FUNCTION_SPEC where
  prt i e = case e of
    Language.AbsAMPLGrammar.Function_spec pident varss coms -> prPrec i 0 (concatD [prt 0 pident, doc (showString "("), prt 0 varss, doc (showString ")"), doc (showString "="), prt 0 coms])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print Language.AbsAMPLGrammar.START where
  prt i e = case e of
    Language.AbsAMPLGrammar.Start mainrun channelspec coms -> prPrec i 0 (concatD [prt 0 mainrun, prt 0 channelspec, doc (showString ":"), prt 0 coms])
    Language.AbsAMPLGrammar.Start_none -> prPrec i 0 (concatD [])

instance Print Language.AbsAMPLGrammar.CHANNEL_SPEC where
  prt i e = case e of
    Language.AbsAMPLGrammar.Channel_spec pidents1 pidents2 -> prPrec i 0 (concatD [doc (showString "("), doc (showString "|"), prt 0 pidents1, doc (showString "=>"), prt 0 pidents2, doc (showString ")")])

instance Print Language.AbsAMPLGrammar.COMS where
  prt i e = case e of
    Language.AbsAMPLGrammar.Prog coms -> prPrec i 0 (concatD [doc (showString "{"), prt 0 coms, doc (showString "}")])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [Language.AbsAMPLGrammar.COM] where
  prt = prtList

instance Print Language.AbsAMPLGrammar.COM where
  prt i e = case e of
    Language.AbsAMPLGrammar.AC_ASSIGN pident com -> prPrec i 0 (concatD [prt 0 pident, doc (showString ":="), prt 0 com])
    Language.AbsAMPLGrammar.AC_STOREf store pident -> prPrec i 0 (concatD [prt 0 store, prt 0 pident])
    Language.AbsAMPLGrammar.AC_LOADf load pident -> prPrec i 0 (concatD [prt 0 load, prt 0 pident])
    Language.AbsAMPLGrammar.AC_RET ret -> prPrec i 0 (concatD [prt 0 ret])
    Language.AbsAMPLGrammar.AC_CALLf call pident pidents -> prPrec i 0 (concatD [prt 0 call, prt 0 pident, doc (showString "("), prt 0 pidents, doc (showString ")")])
    Language.AbsAMPLGrammar.AC_INT constint cinteger -> prPrec i 0 (concatD [prt 0 constint, prt 0 cinteger])
    Language.AbsAMPLGrammar.AC_CHAR constchar character -> prPrec i 0 (concatD [prt 0 constchar, prt 0 character])
    Language.AbsAMPLGrammar.AC_STRING conststring str -> prPrec i 0 (concatD [prt 0 conststring, prt 0 str])
    Language.AbsAMPLGrammar.AC_TOSTR tostr -> prPrec i 0 (concatD [prt 0 tostr])
    Language.AbsAMPLGrammar.AC_TOINT toint -> prPrec i 0 (concatD [prt 0 toint])
    Language.AbsAMPLGrammar.AC_AND and -> prPrec i 0 (concatD [prt 0 and])
    Language.AbsAMPLGrammar.AC_OR or -> prPrec i 0 (concatD [prt 0 or])
    Language.AbsAMPLGrammar.AC_APPEND append -> prPrec i 0 (concatD [prt 0 append])
    Language.AbsAMPLGrammar.AC_TRUE true -> prPrec i 0 (concatD [prt 0 true])
    Language.AbsAMPLGrammar.AC_FALSE false -> prPrec i 0 (concatD [prt 0 false])
    Language.AbsAMPLGrammar.AC_UNSTRING unstring -> prPrec i 0 (concatD [prt 0 unstring])
    Language.AbsAMPLGrammar.AC_LEQ leqi -> prPrec i 0 (concatD [prt 0 leqi])
    Language.AbsAMPLGrammar.AC_EQ eqi -> prPrec i 0 (concatD [prt 0 eqi])
    Language.AbsAMPLGrammar.AC_LEQC leqc -> prPrec i 0 (concatD [prt 0 leqc])
    Language.AbsAMPLGrammar.AC_EQC eqc -> prPrec i 0 (concatD [prt 0 eqc])
    Language.AbsAMPLGrammar.AC_LEQS leqs -> prPrec i 0 (concatD [prt 0 leqs])
    Language.AbsAMPLGrammar.AC_EQS eqs -> prPrec i 0 (concatD [prt 0 eqs])
    Language.AbsAMPLGrammar.AC_CONCAT concats n -> prPrec i 0 (concatD [prt 0 concats, prt 0 n])
    Language.AbsAMPLGrammar.AC_ADD add -> prPrec i 0 (concatD [prt 0 add])
    Language.AbsAMPLGrammar.AC_SUB subtract -> prPrec i 0 (concatD [prt 0 subtract])
    Language.AbsAMPLGrammar.AC_MUL mul -> prPrec i 0 (concatD [prt 0 mul])
    Language.AbsAMPLGrammar.AC_DIVQ quot -> prPrec i 0 (concatD [prt 0 quot])
    Language.AbsAMPLGrammar.AC_DIVR rem -> prPrec i 0 (concatD [prt 0 rem])
    Language.AbsAMPLGrammar.AC_CONS cons pinteger1 pinteger2 -> prPrec i 0 (concatD [prt 0 cons, doc (showString "("), prt 0 pinteger1, doc (showString ","), prt 0 pinteger2, doc (showString ")")])
    Language.AbsAMPLGrammar.AC_STRUCT uident1 uident2 -> prPrec i 0 (concatD [prt 0 uident1, doc (showString "."), prt 0 uident2])
    Language.AbsAMPLGrammar.AC_STRUCTAS uident1 uident2 pidents -> prPrec i 0 (concatD [prt 0 uident1, doc (showString "."), prt 0 uident2, doc (showString "("), prt 0 pidents, doc (showString ")")])
    Language.AbsAMPLGrammar.AC_CASEf case_ pident labelcomss -> prPrec i 0 (concatD [prt 0 case_, prt 0 pident, doc (showString "of"), doc (showString "{"), prt 0 labelcomss, doc (showString "}")])
    Language.AbsAMPLGrammar.AC_IF if_ pident coms1 coms2 -> prPrec i 0 (concatD [prt 0 if_, prt 0 pident, doc (showString "then"), prt 0 coms1, doc (showString "else"), prt 0 coms2])
    Language.AbsAMPLGrammar.AC_RECORDf rec labelcomss -> prPrec i 0 (concatD [prt 0 rec, doc (showString "of"), doc (showString "{"), prt 0 labelcomss, doc (showString "}")])
    Language.AbsAMPLGrammar.AC_DEST uident1 uident2 pident -> prPrec i 0 (concatD [prt 0 uident1, doc (showString "."), prt 0 uident2, prt 0 pident])
    Language.AbsAMPLGrammar.AC_DESTAS uident1 uident2 pidents pident -> prPrec i 0 (concatD [prt 0 uident1, doc (showString "."), prt 0 uident2, doc (showString "("), prt 0 pidents, doc (showString ")"), prt 0 pident])
    Language.AbsAMPLGrammar.AC_GETf get pident1 pident2 -> prPrec i 0 (concatD [prt 0 get, prt 0 pident1, doc (showString "on"), prt 0 pident2])
    Language.AbsAMPLGrammar.AC_HPUTf hput pident uident1 uident2 -> prPrec i 0 (concatD [prt 0 hput, prt 0 pident, prt 0 uident1, doc (showString "."), prt 0 uident2])
    Language.AbsAMPLGrammar.AC_HCASEf hcase pident labelcomss -> prPrec i 0 (concatD [prt 0 hcase, prt 0 pident, doc (showString "of"), doc (showString "{"), prt 0 labelcomss, doc (showString "}")])
    Language.AbsAMPLGrammar.AC_PUTf put pident1 pident2 -> prPrec i 0 (concatD [prt 0 put, prt 0 pident1, doc (showString "on"), prt 0 pident2])
    Language.AbsAMPLGrammar.AC_SPLITf split pident1 pident2 pident3 -> prPrec i 0 (concatD [prt 0 split, prt 0 pident1, doc (showString "into"), prt 0 pident2, prt 0 pident3])
    Language.AbsAMPLGrammar.AC_FORKf fork pident1 pident2 pidents1 coms1 pident3 pidents2 coms2 -> prPrec i 0 (concatD [prt 0 fork, prt 0 pident1, doc (showString "as"), doc (showString "{"), prt 0 pident2, doc (showString "with"), prt 0 pidents1, doc (showString ":"), prt 0 coms1, doc (showString ";"), prt 0 pident3, doc (showString "with"), prt 0 pidents2, doc (showString ":"), prt 0 coms2, doc (showString "}")])
    Language.AbsAMPLGrammar.AC_PLUGf plug pidents1 pidents2 coms1 pidents3 coms2 -> prPrec i 0 (concatD [prt 0 plug, prt 0 pidents1, doc (showString "as"), doc (showString "{"), doc (showString "with"), doc (showString "["), prt 0 pidents2, doc (showString "]"), doc (showString ":"), prt 0 coms1, doc (showString ";"), doc (showString "with"), doc (showString "["), prt 0 pidents3, doc (showString "]"), doc (showString ":"), prt 0 coms2, doc (showString "}")])
    Language.AbsAMPLGrammar.AC_RUNf run pident pidents1 pidents2 pidents3 -> prPrec i 0 (concatD [prt 0 run, prt 0 pident, doc (showString "("), prt 0 pidents1, doc (showString "|"), prt 0 pidents2, doc (showString "=>"), prt 0 pidents3, doc (showString ")")])
    Language.AbsAMPLGrammar.AC_IDF pident1 chid pident2 -> prPrec i 0 (concatD [prt 0 pident1, prt 0 chid, prt 0 pident2])
    Language.AbsAMPLGrammar.AC_RACE race racess -> prPrec i 0 (concatD [prt 0 race, doc (showString "{"), prt 0 racess, doc (showString "}")])
    Language.AbsAMPLGrammar.AC_PROD pidents -> prPrec i 0 (concatD [doc (showString "("), prt 0 pidents, doc (showString ")")])
    Language.AbsAMPLGrammar.AC_PRODELEM pinteger pident -> prPrec i 0 (concatD [doc (showString "#"), prt 0 pinteger, doc (showString "("), prt 0 pident, doc (showString ")")])
    Language.AbsAMPLGrammar.AC_EMSG str -> prPrec i 0 (concatD [prt 0 str])
    Language.AbsAMPLGrammar.AC_CLOSEf close pident -> prPrec i 0 (concatD [prt 0 close, prt 0 pident])
    Language.AbsAMPLGrammar.AC_HALTf halt pidents -> prPrec i 0 (concatD [prt 0 halt, prt 0 pidents])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print Language.AbsAMPLGrammar.LABELCOMS where
  prt i e = case e of
    Language.AbsAMPLGrammar.Labelcoms1 uident1 uident2 coms -> prPrec i 0 (concatD [prt 0 uident1, doc (showString "."), prt 0 uident2, doc (showString ":"), prt 0 coms])
    Language.AbsAMPLGrammar.Labelcoms2 uident1 uident2 pidents coms -> prPrec i 0 (concatD [prt 0 uident1, doc (showString "."), prt 0 uident2, doc (showString "("), prt 0 pidents, doc (showString ")"), doc (showString ":"), prt 0 coms])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print [Language.AbsAMPLGrammar.COMS] where
  prt = prtList

instance Print [Language.AbsAMPLGrammar.LABELCOMS] where
  prt = prtList

instance Print Language.AbsAMPLGrammar.RACES where
  prt i e = case e of
    Language.AbsAMPLGrammar.Races pident coms -> prPrec i 0 (concatD [prt 0 pident, doc (showString "->"), prt 0 coms])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print [Language.AbsAMPLGrammar.RACES] where
  prt = prtList

instance Print [Language.AbsAMPLGrammar.PIdent] where
  prt = prtList

instance Print Language.AbsAMPLGrammar.CInteger where
  prt i e = case e of
    Language.AbsAMPLGrammar.Positive pinteger -> prPrec i 0 (concatD [prt 0 pinteger])
    Language.AbsAMPLGrammar.Negative pinteger -> prPrec i 0 (concatD [doc (showString "-"), prt 0 pinteger])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [Language.AbsAMPLGrammar.CInteger] where
  prt = prtList

