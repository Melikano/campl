-- -*- haskell -*-
-- This Alex file was machine-generated by the BNF converter
{
{-# OPTIONS -fno-warn-incomplete-patterns #-}
{-# OPTIONS_GHC -w #-}
module Language.LexMPL where



import qualified Data.Bits
import Data.Word (Word8)
import Data.Char (ord)
}


$l = [a-zA-Z\192 - \255] # [\215 \247]    -- isolatin1 letter FIXME
$c = [A-Z\192-\221] # [\215]    -- capital isolatin1 letter FIXME
$s = [a-z\222-\255] # [\247]    -- small isolatin1 letter FIXME
$d = [0-9]                -- digit
$i = [$l $d _ ']          -- identifier character
$u = [\0-\255]          -- universal: any character

@rsyms =    -- symbols and non-identifier-like reserved words
   \, | \{ | \} | \; | \| | \. | \- \> | \= \> | \= | \: \: | \: \=

:-
"--" [.]* ; -- Toss single line comments
"{-" ([$u # \-] | \-+ [$u # [\- \}]])* ("-")+ "}" ;

$white+ ;
@rsyms { tok (\p s -> PT p (eitherResIdent (TV . share) s)) }
(\# $c | $c)($l | $d | \_)* { tok (\p s -> PT p (eitherResIdent (T_UIdent . share) s)) }
$l ($l | $d | \_ | \')* { tok (\p s -> PT p (eitherResIdent (T_PIdent . share) s)) }
($l | $c)($l | $d | \_ | \')* { tok (\p s -> PT p (eitherResIdent (T_UPIdent . share) s)) }
([\-]$d | $d)$d * { tok (\p s -> PT p (eitherResIdent (T_PInteger . share) s)) }
\( \+ \) { tok (\p s -> PT p (eitherResIdent (T_Par . share) s)) }
\( \* \) { tok (\p s -> PT p (eitherResIdent (T_Tensor . share) s)) }
\( { tok (\p s -> PT p (eitherResIdent (T_LBracket . share) s)) }
\) { tok (\p s -> PT p (eitherResIdent (T_RBracket . share) s)) }
\[ { tok (\p s -> PT p (eitherResIdent (T_LSquareBracket . share) s)) }
\] { tok (\p s -> PT p (eitherResIdent (T_RSquareBracket . share) s)) }
\_ { tok (\p s -> PT p (eitherResIdent (T_NullPattern . share) s)) }
\: { tok (\p s -> PT p (eitherResIdent (T_Colon . share) s)) }
\| \| { tok (\p s -> PT p (eitherResIdent (T_Infixl1op . share) s)) }
\& \& { tok (\p s -> PT p (eitherResIdent (T_Infixl2op . share) s)) }
\= \= | \/ \= | \< | \> | \< \= | \> \= { tok (\p s -> PT p (eitherResIdent (T_Infixl3op . share) s)) }
\+ \+ { tok (\p s -> PT p (eitherResIdent (T_Infixl4op . share) s)) }
\+ | \- { tok (\p s -> PT p (eitherResIdent (T_Infixl5op . share) s)) }
\* | \/ | \% { tok (\p s -> PT p (eitherResIdent (T_Infixl6op . share) s)) }
\^ { tok (\p s -> PT p (eitherResIdent (T_Infixr7op . share) s)) }
\! \! { tok (\p s -> PT p (eitherResIdent (T_Infixl8op . share) s)) }
c l o s e { tok (\p s -> PT p (eitherResIdent (T_Close . share) s)) }
h a l t { tok (\p s -> PT p (eitherResIdent (T_Halt . share) s)) }
g e t { tok (\p s -> PT p (eitherResIdent (T_Get . share) s)) }
p u t { tok (\p s -> PT p (eitherResIdent (T_Put . share) s)) }
h c a s e { tok (\p s -> PT p (eitherResIdent (T_HCase . share) s)) }
h p u t { tok (\p s -> PT p (eitherResIdent (T_HPut . share) s)) }
s p l i t { tok (\p s -> PT p (eitherResIdent (T_Split . share) s)) }
f o r k { tok (\p s -> PT p (eitherResIdent (T_Fork . share) s)) }
\| \= \| { tok (\p s -> PT p (eitherResIdent (T_ChId . share) s)) }
c a s e { tok (\p s -> PT p (eitherResIdent (T_Case . share) s)) }

$l $i*   { tok (\p s -> PT p (eitherResIdent (TV . share) s)) }
\" ([$u # [\" \\ \n]] | (\\ (\" | \\ | \' | n | t)))* \"{ tok (\p s -> PT p (TL $ share $ unescapeInitTail s)) }
\' ($u # [\' \\] | \\ [\\ \' n t]) \'  { tok (\p s -> PT p (TC $ share s))  }

$d+ \. $d+ (e (\-)? $d+)? { tok (\p s -> PT p (TD $ share s)) }

{

tok :: (Posn -> String -> Token) -> (Posn -> String -> Token)
tok f p s = f p s

share :: String -> String
share = id

data Tok =
   TS !String !Int    -- reserved words and symbols
 | TL !String         -- string literals
 | TI !String         -- integer literals
 | TV !String         -- identifiers
 | TD !String         -- double precision float literals
 | TC !String         -- character literals
 | T_UIdent !String
 | T_PIdent !String
 | T_UPIdent !String
 | T_PInteger !String
 | T_Par !String
 | T_Tensor !String
 | T_LBracket !String
 | T_RBracket !String
 | T_LSquareBracket !String
 | T_RSquareBracket !String
 | T_NullPattern !String
 | T_Colon !String
 | T_Infixl1op !String
 | T_Infixl2op !String
 | T_Infixl3op !String
 | T_Infixl4op !String
 | T_Infixl5op !String
 | T_Infixl6op !String
 | T_Infixr7op !String
 | T_Infixl8op !String
 | T_Close !String
 | T_Halt !String
 | T_Get !String
 | T_Put !String
 | T_HCase !String
 | T_HPut !String
 | T_Split !String
 | T_Fork !String
 | T_ChId !String
 | T_Case !String

 deriving (Eq,Show,Ord)

data Token =
   PT  Posn Tok
 | Err Posn
  deriving (Eq,Show,Ord)

tokenPos :: [Token] -> String
tokenPos (PT (Pn _ l _) _ :_) = "line " ++ show l
tokenPos (Err (Pn _ l _) :_) = "line " ++ show l
tokenPos _ = "end of file"

tokenPosn :: Token -> Posn
tokenPosn (PT p _) = p
tokenPosn (Err p) = p

tokenLineCol :: Token -> (Int, Int)
tokenLineCol = posLineCol . tokenPosn

posLineCol :: Posn -> (Int, Int)
posLineCol (Pn _ l c) = (l,c)

mkPosToken :: Token -> ((Int, Int), String)
mkPosToken t@(PT p _) = (posLineCol p, prToken t)

prToken :: Token -> String
prToken t = case t of
  PT _ (TS s _) -> s
  PT _ (TL s)   -> show s
  PT _ (TI s)   -> s
  PT _ (TV s)   -> s
  PT _ (TD s)   -> s
  PT _ (TC s)   -> s
  PT _ (T_UIdent s) -> s
  PT _ (T_PIdent s) -> s
  PT _ (T_UPIdent s) -> s
  PT _ (T_PInteger s) -> s
  PT _ (T_Par s) -> s
  PT _ (T_Tensor s) -> s
  PT _ (T_LBracket s) -> s
  PT _ (T_RBracket s) -> s
  PT _ (T_LSquareBracket s) -> s
  PT _ (T_RSquareBracket s) -> s
  PT _ (T_NullPattern s) -> s
  PT _ (T_Colon s) -> s
  PT _ (T_Infixl1op s) -> s
  PT _ (T_Infixl2op s) -> s
  PT _ (T_Infixl3op s) -> s
  PT _ (T_Infixl4op s) -> s
  PT _ (T_Infixl5op s) -> s
  PT _ (T_Infixl6op s) -> s
  PT _ (T_Infixr7op s) -> s
  PT _ (T_Infixl8op s) -> s
  PT _ (T_Close s) -> s
  PT _ (T_Halt s) -> s
  PT _ (T_Get s) -> s
  PT _ (T_Put s) -> s
  PT _ (T_HCase s) -> s
  PT _ (T_HPut s) -> s
  PT _ (T_Split s) -> s
  PT _ (T_Fork s) -> s
  PT _ (T_ChId s) -> s
  PT _ (T_Case s) -> s


data BTree = N | B String Tok BTree BTree deriving (Show)

eitherResIdent :: (String -> Tok) -> String -> Tok
eitherResIdent tv s = treeFind resWords
  where
  treeFind N = tv s
  treeFind (B a t left right) | s < a  = treeFind left
                              | s > a  = treeFind right
                              | s == a = t

resWords :: BTree
resWords = b "if" 20 (b "as" 10 (b ":=" 5 (b "." 3 (b "->" 2 (b "," 1 N N) N) (b "::" 4 N N)) (b "=>" 8 (b "=" 7 (b ";" 6 N N) N) (b "and" 9 N N))) (b "do" 15 (b "data" 13 (b "coprotocol" 12 (b "codata" 11 N N) N) (b "defn" 14 N N)) (b "forall" 18 (b "fold" 17 (b "else" 16 N N) N) (b "fun" 19 N N)))) (b "protocol" 30 (b "of" 25 (b "let" 23 (b "into" 22 (b "in" 21 N N) N) (b "neg" 24 N N)) (b "potato" 28 (b "plug" 27 (b "on" 26 N N) N) (b "proc" 29 N N))) (b "where" 35 (b "then" 33 (b "switch" 32 (b "race" 31 N N) N) (b "unfold" 34 N N)) (b "|" 38 (b "{" 37 (b "with" 36 N N) N) (b "}" 39 N N))))
   where b s n = let bs = id s
                  in B bs (TS bs n)

unescapeInitTail :: String -> String
unescapeInitTail = id . unesc . tail . id where
  unesc s = case s of
    '\\':c:cs | elem c ['\"', '\\', '\''] -> c : unesc cs
    '\\':'n':cs  -> '\n' : unesc cs
    '\\':'t':cs  -> '\t' : unesc cs
    '"':[]    -> []
    c:cs      -> c : unesc cs
    _         -> []

-------------------------------------------------------------------
-- Alex wrapper code.
-- A modified "posn" wrapper.
-------------------------------------------------------------------

data Posn = Pn !Int !Int !Int
      deriving (Eq, Show,Ord)

alexStartPos :: Posn
alexStartPos = Pn 0 1 1

alexMove :: Posn -> Char -> Posn
alexMove (Pn a l c) '\t' = Pn (a+1)  l     (((c+7) `div` 8)*8+1)
alexMove (Pn a l c) '\n' = Pn (a+1) (l+1)   1
alexMove (Pn a l c) _    = Pn (a+1)  l     (c+1)

type Byte = Word8

type AlexInput = (Posn,     -- current position,
                  Char,     -- previous char
                  [Byte],   -- pending bytes on the current char
                  String)   -- current input string

tokens :: String -> [Token]
tokens str = go (alexStartPos, '\n', [], str)
    where
      go :: AlexInput -> [Token]
      go inp@(pos, _, _, str) =
               case alexScan inp 0 of
                AlexEOF                   -> []
                AlexError (pos, _, _, _)  -> [Err pos]
                AlexSkip  inp' len        -> go inp'
                AlexToken inp' len act    -> act pos (take len str) : (go inp')

alexGetByte :: AlexInput -> Maybe (Byte,AlexInput)
alexGetByte (p, c, (b:bs), s) = Just (b, (p, c, bs, s))
alexGetByte (p, _, [], s) =
  case  s of
    []  -> Nothing
    (c:s) ->
             let p'     = alexMove p c
                 (b:bs) = utf8Encode c
              in p' `seq` Just (b, (p', c, bs, s))

alexInputPrevChar :: AlexInput -> Char
alexInputPrevChar (p, c, bs, s) = c

-- | Encode a Haskell String to a list of Word8 values, in UTF8 format.
utf8Encode :: Char -> [Word8]
utf8Encode = map fromIntegral . go . ord
 where
  go oc
   | oc <= 0x7f       = [oc]

   | oc <= 0x7ff      = [ 0xc0 + (oc `Data.Bits.shiftR` 6)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]

   | oc <= 0xffff     = [ 0xe0 + (oc `Data.Bits.shiftR` 12)
                        , 0x80 + ((oc `Data.Bits.shiftR` 6) Data.Bits..&. 0x3f)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]
   | otherwise        = [ 0xf0 + (oc `Data.Bits.shiftR` 18)
                        , 0x80 + ((oc `Data.Bits.shiftR` 12) Data.Bits..&. 0x3f)
                        , 0x80 + ((oc `Data.Bits.shiftR` 6) Data.Bits..&. 0x3f)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]
}
