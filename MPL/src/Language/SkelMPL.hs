-- Haskell module generated by the BNF converter

module Language.SkelMPL where

import qualified Language.AbsMPL

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transPInteger :: Language.AbsMPL.PInteger -> Result
transPInteger x = case x of
  Language.AbsMPL.PInteger string -> failure x
transPDouble :: Language.AbsMPL.PDouble -> Result
transPDouble x = case x of
  Language.AbsMPL.PDouble string -> failure x
transPChar :: Language.AbsMPL.PChar -> Result
transPChar x = case x of
  Language.AbsMPL.PChar string -> failure x
transPString :: Language.AbsMPL.PString -> Result
transPString x = case x of
  Language.AbsMPL.PString string -> failure x
transPar :: Language.AbsMPL.Par -> Result
transPar x = case x of
  Language.AbsMPL.Par string -> failure x
transTensor :: Language.AbsMPL.Tensor -> Result
transTensor x = case x of
  Language.AbsMPL.Tensor string -> failure x
transLBracket :: Language.AbsMPL.LBracket -> Result
transLBracket x = case x of
  Language.AbsMPL.LBracket string -> failure x
transRBracket :: Language.AbsMPL.RBracket -> Result
transRBracket x = case x of
  Language.AbsMPL.RBracket string -> failure x
transLSquareBracket :: Language.AbsMPL.LSquareBracket -> Result
transLSquareBracket x = case x of
  Language.AbsMPL.LSquareBracket string -> failure x
transRSquareBracket :: Language.AbsMPL.RSquareBracket -> Result
transRSquareBracket x = case x of
  Language.AbsMPL.RSquareBracket string -> failure x
transNullPattern :: Language.AbsMPL.NullPattern -> Result
transNullPattern x = case x of
  Language.AbsMPL.NullPattern string -> failure x
transColon :: Language.AbsMPL.Colon -> Result
transColon x = case x of
  Language.AbsMPL.Colon string -> failure x
transInfixl1op :: Language.AbsMPL.Infixl1op -> Result
transInfixl1op x = case x of
  Language.AbsMPL.Infixl1op string -> failure x
transInfixl2op :: Language.AbsMPL.Infixl2op -> Result
transInfixl2op x = case x of
  Language.AbsMPL.Infixl2op string -> failure x
transInfixl3op :: Language.AbsMPL.Infixl3op -> Result
transInfixl3op x = case x of
  Language.AbsMPL.Infixl3op string -> failure x
transInfixl4op :: Language.AbsMPL.Infixl4op -> Result
transInfixl4op x = case x of
  Language.AbsMPL.Infixl4op string -> failure x
transInfixl5op :: Language.AbsMPL.Infixl5op -> Result
transInfixl5op x = case x of
  Language.AbsMPL.Infixl5op string -> failure x
transInfixl6op :: Language.AbsMPL.Infixl6op -> Result
transInfixl6op x = case x of
  Language.AbsMPL.Infixl6op string -> failure x
transInfixr7op :: Language.AbsMPL.Infixr7op -> Result
transInfixr7op x = case x of
  Language.AbsMPL.Infixr7op string -> failure x
transInfixl8op :: Language.AbsMPL.Infixl8op -> Result
transInfixl8op x = case x of
  Language.AbsMPL.Infixl8op string -> failure x
transClose :: Language.AbsMPL.Close -> Result
transClose x = case x of
  Language.AbsMPL.Close string -> failure x
transHalt :: Language.AbsMPL.Halt -> Result
transHalt x = case x of
  Language.AbsMPL.Halt string -> failure x
transGet :: Language.AbsMPL.Get -> Result
transGet x = case x of
  Language.AbsMPL.Get string -> failure x
transPut :: Language.AbsMPL.Put -> Result
transPut x = case x of
  Language.AbsMPL.Put string -> failure x
transHCase :: Language.AbsMPL.HCase -> Result
transHCase x = case x of
  Language.AbsMPL.HCase string -> failure x
transHPut :: Language.AbsMPL.HPut -> Result
transHPut x = case x of
  Language.AbsMPL.HPut string -> failure x
transSplit :: Language.AbsMPL.Split -> Result
transSplit x = case x of
  Language.AbsMPL.Split string -> failure x
transFork :: Language.AbsMPL.Fork -> Result
transFork x = case x of
  Language.AbsMPL.Fork string -> failure x
transChId :: Language.AbsMPL.ChId -> Result
transChId x = case x of
  Language.AbsMPL.ChId string -> failure x
transCase :: Language.AbsMPL.Case -> Result
transCase x = case x of
  Language.AbsMPL.Case string -> failure x
transUIdent :: Language.AbsMPL.UIdent -> Result
transUIdent x = case x of
  Language.AbsMPL.UIdent string -> failure x
transPIdent :: Language.AbsMPL.PIdent -> Result
transPIdent x = case x of
  Language.AbsMPL.PIdent string -> failure x
transUPIdent :: Language.AbsMPL.UPIdent -> Result
transUPIdent x = case x of
  Language.AbsMPL.UPIdent string -> failure x
transMplProg :: Language.AbsMPL.MplProg -> Result
transMplProg x = case x of
  Language.AbsMPL.MPL_PROG mplstmts -> failure x
transMplStmt :: Language.AbsMPL.MplStmt -> Result
transMplStmt x = case x of
  Language.AbsMPL.MPL_DEFN_STMS_WHERE mpldefns mplwheres -> failure x
  Language.AbsMPL.MPL_DEFN_STMS mpldefns -> failure x
  Language.AbsMPL.MPL_STMT mpldefn -> failure x
transMplWhere :: Language.AbsMPL.MplWhere -> Result
transMplWhere x = case x of
  Language.AbsMPL.MPL_WHERE mplstmt -> failure x
transMplDefn :: Language.AbsMPL.MplDefn -> Result
transMplDefn x = case x of
  Language.AbsMPL.MPL_SEQUENTIAL_TYPE_DEFN sequentialtypedefn -> failure x
  Language.AbsMPL.MPL_CONCURRENT_TYPE_DEFN concurrenttypedefn -> failure x
  Language.AbsMPL.MPL_FUNCTION_DEFN functiondefn -> failure x
  Language.AbsMPL.MPL_PROCESS_DEFN processdefn -> failure x
  Language.AbsMPL.MPL_DEFNTEST -> failure x
transMplType :: Language.AbsMPL.MplType -> Result
transMplType x = case x of
  Language.AbsMPL.MPL_TYPE mpltype -> failure x
  Language.AbsMPL.PAR_TYPE mpltype1 par mpltype2 -> failure x
  Language.AbsMPL.TENSOR_TYPE mpltype1 tensor mpltype2 -> failure x
  Language.AbsMPL.MPL_UIDENT_ARGS_TYPE uident lbracket mpltypes rbracket -> failure x
  Language.AbsMPL.MPL_UIDENT_SEQ_CONC_ARGS_TYPE uident lbracket mpltypes1 mpltypes2 rbracket -> failure x
  Language.AbsMPL.MPL_UIDENT_NO_ARGS_TYPE uident -> failure x
  Language.AbsMPL.MPL_UNIT_TYPE lbracket rbracket -> failure x
  Language.AbsMPL.MPL_BRACKETED_TYPE lbracket mpltype rbracket -> failure x
  Language.AbsMPL.MPL_LIST_TYPE lsquarebracket mpltype rsquarebracket -> failure x
  Language.AbsMPL.MPL_TUPLE_TYPE lbracket mpltype tuplelisttypes rbracket -> failure x
  Language.AbsMPL.MPL_SEQ_ARROW_TYPE forallvarlists mpltypes mpltype -> failure x
  Language.AbsMPL.MPL_CONC_ARROW_TYPE forallvarlists mpltypes1 mpltypes2 mpltypes3 -> failure x
transTupleListType :: Language.AbsMPL.TupleListType -> Result
transTupleListType x = case x of
  Language.AbsMPL.TUPLE_LIST_TYPE mpltype -> failure x
transForallVarList :: Language.AbsMPL.ForallVarList -> Result
transForallVarList x = case x of
  Language.AbsMPL.MPL_SEQ_FUN_TYPE_FORALL_LIST uident -> failure x
transSequentialTypeDefn :: Language.AbsMPL.SequentialTypeDefn -> Result
transSequentialTypeDefn x = case x of
  Language.AbsMPL.DATA_DEFN seqtypeclausedefns -> failure x
  Language.AbsMPL.CODATA_DEFN seqtypeclausedefns -> failure x
transSeqTypeClauseDefn :: Language.AbsMPL.SeqTypeClauseDefn -> Result
transSeqTypeClauseDefn x = case x of
  Language.AbsMPL.SEQ_TYPE_CLAUSE mpltype1 mpltype2 seqtypephrasedefns -> failure x
transSeqTypePhraseDefn :: Language.AbsMPL.SeqTypePhraseDefn -> Result
transSeqTypePhraseDefn x = case x of
  Language.AbsMPL.SEQ_TYPE_PHRASE typehandlenames mpltypes mpltype -> failure x
transConcurrentTypeDefn :: Language.AbsMPL.ConcurrentTypeDefn -> Result
transConcurrentTypeDefn x = case x of
  Language.AbsMPL.PROTOCOL_DEFN concurrenttypeclausedefns -> failure x
  Language.AbsMPL.COPROTOCOL_DEFN concurrenttypeclausedefns -> failure x
transConcurrentTypeClauseDefn :: Language.AbsMPL.ConcurrentTypeClauseDefn -> Result
transConcurrentTypeClauseDefn x = case x of
  Language.AbsMPL.CONCURRENT_TYPE_CLAUSE mpltype1 mpltype2 concurrenttypephrasedefns -> failure x
transConcurrentTypePhraseDefn :: Language.AbsMPL.ConcurrentTypePhraseDefn -> Result
transConcurrentTypePhraseDefn x = case x of
  Language.AbsMPL.CONCURRENT_TYPE_PHRASE typehandlenames mpltype1 mpltype2 -> failure x
transTypeHandleName :: Language.AbsMPL.TypeHandleName -> Result
transTypeHandleName x = case x of
  Language.AbsMPL.TYPE_HANDLE_NAME uident -> failure x
transExpr :: Language.AbsMPL.Expr -> Result
transExpr x = case x of
  Language.AbsMPL.EXPR expr -> failure x
  Language.AbsMPL.TYPED_EXPR expr mpltype -> failure x
  Language.AbsMPL.IF_EXPR expr1 expr2 expr3 -> failure x
  Language.AbsMPL.LET_EXPR letexprphrases expr -> failure x
  Language.AbsMPL.INFIXR0_EXPR expr1 colon expr2 -> failure x
  Language.AbsMPL.INFIXL1_EXPR expr1 infixlop expr2 -> failure x
  Language.AbsMPL.INFIXL2_EXPR expr1 infixlop expr2 -> failure x
  Language.AbsMPL.INFIXL3_EXPR expr1 infixlop expr2 -> failure x
  Language.AbsMPL.INFIXL4_EXPR expr1 infixlop expr2 -> failure x
  Language.AbsMPL.INFIXL5_EXPR expr1 infixlop expr2 -> failure x
  Language.AbsMPL.INFIXL6_EXPR expr1 infixlop expr2 -> failure x
  Language.AbsMPL.INFIXR7_EXPR expr1 infixrop expr2 -> failure x
  Language.AbsMPL.INFIXL8_EXPR expr1 infixlop expr2 -> failure x
  Language.AbsMPL.LIST_EXPR lsquarebracket exprs rsquarebracket -> failure x
  Language.AbsMPL.VAR_EXPR pident -> failure x
  Language.AbsMPL.INT_EXPR pinteger -> failure x
  Language.AbsMPL.STRING_EXPR pstring -> failure x
  Language.AbsMPL.CHAR_EXPR pchar -> failure x
  Language.AbsMPL.DOUBLE_EXPR pdouble -> failure x
  Language.AbsMPL.UNIT_EXPR lbracket rbracket -> failure x
  Language.AbsMPL.FOLD_EXPR expr foldexprphrases -> failure x
  Language.AbsMPL.UNFOLD_EXPR expr unfoldexprphrases -> failure x
  Language.AbsMPL.CASE_EXPR case_ expr pattexprphrases -> failure x
  Language.AbsMPL.SWITCH_EXP switchexprphrases -> failure x
  Language.AbsMPL.DESTRUCTOR_CONSTRUCTOR_ARGS_EXPR uident lbracket exprs rbracket -> failure x
  Language.AbsMPL.DESTRUCTOR_CONSTRUCTOR_NO_ARGS_EXPR uident -> failure x
  Language.AbsMPL.TUPLE_EXPR lbracket expr tupleexprlists rbracket -> failure x
  Language.AbsMPL.FUN_EXPR pident lbracket exprs rbracket -> failure x
  Language.AbsMPL.RECORD_EXPR lbracket recordexprphrases rbracket -> failure x
  Language.AbsMPL.BRACKETED_EXPR lbracket expr rbracket -> failure x
transUnfoldExprPhrase :: Language.AbsMPL.UnfoldExprPhrase -> Result
transUnfoldExprPhrase x = case x of
  Language.AbsMPL.UNFOLD_EXPR_PHRASE pattern_ foldexprphrases -> failure x
transFoldExprPhrase :: Language.AbsMPL.FoldExprPhrase -> Result
transFoldExprPhrase x = case x of
  Language.AbsMPL.FOLD_EXPR_PHRASE uident colon patterns expr -> failure x
transLetExprPhrase :: Language.AbsMPL.LetExprPhrase -> Result
transLetExprPhrase x = case x of
  Language.AbsMPL.LET_EXPR_PHRASE mplstmt -> failure x
transTupleExprList :: Language.AbsMPL.TupleExprList -> Result
transTupleExprList x = case x of
  Language.AbsMPL.TUPLE_EXPR_LIST expr -> failure x
transRecordExprPhrase :: Language.AbsMPL.RecordExprPhrase -> Result
transRecordExprPhrase x = case x of
  Language.AbsMPL.RECORD_EXPR_PHRASE uident expr -> failure x
  Language.AbsMPL.RECORD_EXPR_HIGHER_ORDER_PHRASE uident pattexprphrase -> failure x
transSwitchExprPhrase :: Language.AbsMPL.SwitchExprPhrase -> Result
transSwitchExprPhrase x = case x of
  Language.AbsMPL.SWITCH_EXPR_PHRASE expr1 expr2 -> failure x
transPattExprPhrase :: Language.AbsMPL.PattExprPhrase -> Result
transPattExprPhrase x = case x of
  Language.AbsMPL.PATTERN_TO_EXPR patterns expr -> failure x
transPattern :: Language.AbsMPL.Pattern -> Result
transPattern x = case x of
  Language.AbsMPL.PATTERN pattern_ -> failure x
  Language.AbsMPL.TYPED_PATTERN pattern_ mpltype -> failure x
  Language.AbsMPL.LIST_COLON_PATTERN pattern_1 colon pattern_2 -> failure x
  Language.AbsMPL.CONSTRUCTOR_PATTERN_ARGS uident lbracket patterns rbracket -> failure x
  Language.AbsMPL.CONSTRUCTOR_PATTERN_NO_ARGS uident -> failure x
  Language.AbsMPL.UNIT_PATTERN lbracket rbracket -> failure x
  Language.AbsMPL.RECORD_PATTERN lbracket destructorpatternphrases rbracket -> failure x
  Language.AbsMPL.LIST_PATTERN lsquarebracket patterns rsquarebracket -> failure x
  Language.AbsMPL.TUPLE_PATTERN lbracket pattern_ tuplelistpatterns rbracket -> failure x
  Language.AbsMPL.VAR_PATTERN pident -> failure x
  Language.AbsMPL.STR_PATTERN pstring -> failure x
  Language.AbsMPL.CHAR_PATTERN pchar -> failure x
  Language.AbsMPL.INT_PATTERN pinteger -> failure x
  Language.AbsMPL.NULL_PATTERN nullpattern -> failure x
  Language.AbsMPL.BRACKETED_PATTERN lbracket pattern_ rbracket -> failure x
transTupleListPattern :: Language.AbsMPL.TupleListPattern -> Result
transTupleListPattern x = case x of
  Language.AbsMPL.TUPLE_LIST_PATTERN pattern_ -> failure x
transDestructorPatternPhrase :: Language.AbsMPL.DestructorPatternPhrase -> Result
transDestructorPatternPhrase x = case x of
  Language.AbsMPL.DESTRUCTOR_PATTERN_PHRASE uident pattern_ -> failure x
transFunctionDefn :: Language.AbsMPL.FunctionDefn -> Result
transFunctionDefn x = case x of
  Language.AbsMPL.INTERNAL_TYPED_FUNCTION_DEFN pident mpltype pattexprphrases -> failure x
  Language.AbsMPL.TYPED_FUNCTION_DEFN pident mpltypes mpltype pattexprphrases -> failure x
  Language.AbsMPL.FUNCTION_DEFN pident pattexprphrases -> failure x
transProcessDefn :: Language.AbsMPL.ProcessDefn -> Result
transProcessDefn x = case x of
  Language.AbsMPL.TYPED_PROCESS_DEFN pident mpltypes1 mpltypes2 mpltypes3 processphrases -> failure x
  Language.AbsMPL.INTERNAL_TYPED_PROCESS_DEFN pident mpltype processphrases -> failure x
  Language.AbsMPL.PROCESS_DEFN pident processphrases -> failure x
transProcessPhrase :: Language.AbsMPL.ProcessPhrase -> Result
transProcessPhrase x = case x of
  Language.AbsMPL.PROCESS_PHRASE patterns pidents1 pidents2 processcommandsblock -> failure x
transProcessCommandsBlock :: Language.AbsMPL.ProcessCommandsBlock -> Result
transProcessCommandsBlock x = case x of
  Language.AbsMPL.PROCESS_COMMANDS_DO_BLOCK processcommands -> failure x
  Language.AbsMPL.PROCESS_COMMANDS_SINGLE_COMMAND_BLOCK processcommand -> failure x
transProcessCommand :: Language.AbsMPL.ProcessCommand -> Result
transProcessCommand x = case x of
  Language.AbsMPL.PROCESS_RUN pident lbracket exprs pidents1 pidents2 rbracket -> failure x
  Language.AbsMPL.PROCESS_CLOSE close pident -> failure x
  Language.AbsMPL.PROCESS_HALT halt pident -> failure x
  Language.AbsMPL.PROCESS_GET get pattern_ pident -> failure x
  Language.AbsMPL.PROCESS_PUT put expr pident -> failure x
  Language.AbsMPL.PROCESS_HCASE hcase pident hcasephrases -> failure x
  Language.AbsMPL.PROCESS_HPUT hput uident pident -> failure x
  Language.AbsMPL.PROCESS_SPLIT split pident splitchannels -> failure x
  Language.AbsMPL.PROCESS_FORK fork pident forkphrases -> failure x
  Language.AbsMPL.PROCESS_ID pident1 chid pident2 -> failure x
  Language.AbsMPL.PROCESS_NEG pident1 chid pident2 -> failure x
  Language.AbsMPL.PROCESS_RACE racephrases -> failure x
  Language.AbsMPL.PROCESS_PLUG plugphrases -> failure x
  Language.AbsMPL.PROCESS_CASE case_ expr processcasephrases -> failure x
  Language.AbsMPL.PROCESS_SWITCH processswitchphrases -> failure x
transHCasePhrase :: Language.AbsMPL.HCasePhrase -> Result
transHCasePhrase x = case x of
  Language.AbsMPL.HCASE_PHRASE uident processcommandsblock -> failure x
transSplitChannel :: Language.AbsMPL.SplitChannel -> Result
transSplitChannel x = case x of
  Language.AbsMPL.SPLIT_CHANNEL pident -> failure x
transForkPhrase :: Language.AbsMPL.ForkPhrase -> Result
transForkPhrase x = case x of
  Language.AbsMPL.FORK_PHRASE pident processcommandsblock -> failure x
  Language.AbsMPL.FORK_WITH_PHRASE pident forkchannels processcommandsblock -> failure x
transForkChannel :: Language.AbsMPL.ForkChannel -> Result
transForkChannel x = case x of
  Language.AbsMPL.FORK_CHANNEL pident -> failure x
transRacePhrase :: Language.AbsMPL.RacePhrase -> Result
transRacePhrase x = case x of
  Language.AbsMPL.RACE_PHRASE pident processcommandsblock -> failure x
transPlugPhrase :: Language.AbsMPL.PlugPhrase -> Result
transPlugPhrase x = case x of
  Language.AbsMPL.PLUG_PHRASE processcommandsblock -> failure x
  Language.AbsMPL.PLUG_PHRASE_AS pidents1 pidents2 processcommandsblock -> failure x
transProcessCasePhrase :: Language.AbsMPL.ProcessCasePhrase -> Result
transProcessCasePhrase x = case x of
  Language.AbsMPL.PROCESS_CASE_PHRASE pattern_ processcommandsblock -> failure x
transProcessSwitchPhrase :: Language.AbsMPL.ProcessSwitchPhrase -> Result
transProcessSwitchPhrase x = case x of
  Language.AbsMPL.PROCESS_SWITCH_PHRASE expr processcommandsblock -> failure x

