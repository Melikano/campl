This is pdfTeX, Version 3.141592653-2.6-1.40.22 (TeX Live 2021/Arch Linux) (preloaded format=pdflatex 2021.7.2)  11 JUL 2021 22:06
entering extended mode
 restricted \write18 enabled.
 %&-line parsing enabled.
**swappedneg.tex
(./swappedneg.tex
LaTeX2e <2020-10-01> patch level 4
L3 programming layer <2021-02-18>
(/usr/share/texmf-dist/tex/latex/base/article.cls
Document Class: article 2020/04/10 v1.4m Standard LaTeX document class
(/usr/share/texmf-dist/tex/latex/base/size10.clo
File: size10.clo 2020/04/10 v1.4m Standard LaTeX file (size option)
)
\c@part=\count179
\c@section=\count180
\c@subsection=\count181
\c@subsubsection=\count182
\c@paragraph=\count183
\c@subparagraph=\count184
\c@figure=\count185
\c@table=\count186
\abovecaptionskip=\skip47
\belowcaptionskip=\skip48
\bibindent=\dimen138
)
(/usr/share/texmf-dist/tex/latex/amsmath/amsmath.sty
Package: amsmath 2020/09/23 v2.17i AMS math features
\@mathmargin=\skip49

For additional information on amsmath, use the `?' option.
(/usr/share/texmf-dist/tex/latex/amsmath/amstext.sty
Package: amstext 2000/06/29 v2.01 AMS text

(/usr/share/texmf-dist/tex/latex/amsmath/amsgen.sty
File: amsgen.sty 1999/11/30 v2.0 generic functions
\@emptytoks=\toks15
\ex@=\dimen139
))
(/usr/share/texmf-dist/tex/latex/amsmath/amsbsy.sty
Package: amsbsy 1999/11/29 v1.2d Bold Symbols
\pmbraise@=\dimen140
)
(/usr/share/texmf-dist/tex/latex/amsmath/amsopn.sty
Package: amsopn 2016/03/08 v2.02 operator names
)
\inf@bad=\count187
LaTeX Info: Redefining \frac on input line 234.
\uproot@=\count188
\leftroot@=\count189
LaTeX Info: Redefining \overline on input line 399.
\classnum@=\count190
\DOTSCASE@=\count191
LaTeX Info: Redefining \ldots on input line 496.
LaTeX Info: Redefining \dots on input line 499.
LaTeX Info: Redefining \cdots on input line 620.
\Mathstrutbox@=\box47
\strutbox@=\box48
\big@size=\dimen141
LaTeX Font Info:    Redeclaring font encoding OML on input line 743.
LaTeX Font Info:    Redeclaring font encoding OMS on input line 744.
\macc@depth=\count192
\c@MaxMatrixCols=\count193
\dotsspace@=\muskip16
\c@parentequation=\count194
\dspbrk@lvl=\count195
\tag@help=\toks16
\row@=\count196
\column@=\count197
\maxfields@=\count198
\andhelp@=\toks17
\eqnshift@=\dimen142
\alignsep@=\dimen143
\tagshift@=\dimen144
\tagwidth@=\dimen145
\totwidth@=\dimen146
\lineht@=\dimen147
\@envbody=\toks18
\multlinegap=\skip50
\multlinetaggap=\skip51
\mathdisplay@stack=\toks19
LaTeX Info: Redefining \[ on input line 2923.
LaTeX Info: Redefining \] on input line 2924.
)
(/usr/share/texmf-dist/tex/latex/amsfonts/amssymb.sty
Package: amssymb 2013/01/14 v3.01 AMS font symbols

(/usr/share/texmf-dist/tex/latex/amsfonts/amsfonts.sty
Package: amsfonts 2013/01/14 v3.01 Basic AMSFonts support
\symAMSa=\mathgroup4
\symAMSb=\mathgroup5
LaTeX Font Info:    Redeclaring math symbol \hbar on input line 98.
LaTeX Font Info:    Overwriting math alphabet `\mathfrak' in version `bold'
(Font)                  U/euf/m/n --> U/euf/b/n on input line 106.
))
(/usr/share/texmf-dist/tex/latex/amscls/amsthm.sty
Package: amsthm 2020/05/29 v2.20.6
\thm@style=\toks20
\thm@bodyfont=\toks21
\thm@headfont=\toks22
\thm@notefont=\toks23
\thm@headpunct=\toks24
\thm@preskip=\skip52
\thm@postskip=\skip53
\thm@headsep=\skip54
\dth@everypar=\toks25
)
(/usr/share/texmf-dist/tex/latex/mathtools/mathtools.sty
Package: mathtools 2021/03/18 v1.25 mathematical typesetting tools

(/usr/share/texmf-dist/tex/latex/graphics/keyval.sty
Package: keyval 2014/10/28 v1.15 key=value parser (DPC)
\KV@toks@=\toks26
)
(/usr/share/texmf-dist/tex/latex/tools/calc.sty
Package: calc 2017/05/25 v4.3 Infix arithmetic (KKT,FJ)
\calc@Acount=\count199
\calc@Bcount=\count266
\calc@Adimen=\dimen148
\calc@Bdimen=\dimen149
\calc@Askip=\skip55
\calc@Bskip=\skip56
LaTeX Info: Redefining \setlength on input line 80.
LaTeX Info: Redefining \addtolength on input line 81.
\calc@Ccount=\count267
\calc@Cskip=\skip57
)
(/usr/share/texmf-dist/tex/latex/mathtools/mhsetup.sty
Package: mhsetup 2021/03/18 v1.4 programming setup (MH)
)
LaTeX Info: Thecontrolsequence`\('isalreadyrobust on input line 130.
LaTeX Info: Thecontrolsequence`\)'isalreadyrobust on input line 130.
LaTeX Info: Thecontrolsequence`\['isalreadyrobust on input line 130.
LaTeX Info: Thecontrolsequence`\]'isalreadyrobust on input line 130.
\g_MT_multlinerow_int=\count268
\l_MT_multwidth_dim=\dimen150
\origjot=\skip58
\l_MT_shortvdotswithinadjustabove_dim=\dimen151
\l_MT_shortvdotswithinadjustbelow_dim=\dimen152
\l_MT_above_intertext_sep=\dimen153
\l_MT_below_intertext_sep=\dimen154
\l_MT_above_shortintertext_sep=\dimen155
\l_MT_below_shortintertext_sep=\dimen156
\xmathstrut@box=\box49
\xmathstrut@dim=\dimen157
)
(/usr/share/texmf-dist/tex/latex/enumitem/enumitem.sty
Package: enumitem 2019/06/20 v3.9 Customized lists
\labelindent=\skip59
\enit@outerparindent=\dimen158
\enit@toks=\toks27
\enit@inbox=\box50
\enit@count@id=\count269
\enitdp@description=\count270
)
(/usr/share/texmf-dist/tex/latex/fancyvrb/fancyvrb.sty
Package: fancyvrb 2021/01/20 v3.7 verbatim text (tvz,hv)
\FV@CodeLineNo=\count271
\FV@InFile=\read2
\FV@TabBox=\box51
\c@FancyVerbLine=\count272
\FV@StepNumber=\count273
\FV@OutFile=\write3
)
\c@thm=\count274
\c@defn=\count275
\c@nota=\count276
\c@exmpl=\count277
\c@case=\count278

(/usr/share/texmf-dist/tex/latex/l3backend/l3backend-pdftex.def
File: l3backend-pdftex.def 2021-03-18 L3 backend support: PDF output (pdfTeX)
\l__color_backend_stack_int=\count279
\l__pdf_internal_box=\box52
)
No file swappedneg.aux.
\openout1 = `swappedneg.aux'.

LaTeX Font Info:    Checking defaults for OML/cmm/m/it on input line 36.
LaTeX Font Info:    ... okay on input line 36.
LaTeX Font Info:    Checking defaults for OMS/cmsy/m/n on input line 36.
LaTeX Font Info:    ... okay on input line 36.
LaTeX Font Info:    Checking defaults for OT1/cmr/m/n on input line 36.
LaTeX Font Info:    ... okay on input line 36.
LaTeX Font Info:    Checking defaults for T1/cmr/m/n on input line 36.
LaTeX Font Info:    ... okay on input line 36.
LaTeX Font Info:    Checking defaults for TS1/cmr/m/n on input line 36.
LaTeX Font Info:    ... okay on input line 36.
LaTeX Font Info:    Checking defaults for OMX/cmex/m/n on input line 36.
LaTeX Font Info:    ... okay on input line 36.
LaTeX Font Info:    Checking defaults for U/cmr/m/n on input line 36.
LaTeX Font Info:    ... okay on input line 36.
(/usr/share/texmf-dist/tex/latex/graphics/graphicx.sty
Package: graphicx 2020/09/09 v1.2b Enhanced LaTeX Graphics (DPC,SPQR)

(/usr/share/texmf-dist/tex/latex/graphics/graphics.sty
Package: graphics 2020/08/30 v1.4c Standard LaTeX Graphics (DPC,SPQR)

(/usr/share/texmf-dist/tex/latex/graphics/trig.sty
Package: trig 2016/01/03 v1.10 sin cos tan (DPC)
)
(/usr/share/texmf-dist/tex/latex/graphics-cfg/graphics.cfg
File: graphics.cfg 2016/06/04 v1.11 sample graphics configuration
)
Package graphics Info: Driver file: pdftex.def on input line 105.

(/usr/share/texmf-dist/tex/latex/graphics-def/pdftex.def
File: pdftex.def 2020/10/05 v1.2a Graphics/color driver for pdftex

(/usr/share/texmf-dist/tex/context/base/mkii/supp-pdf.mkii
[Loading MPS to PDF converter (version 2006.09.02).]
\scratchcounter=\count280
\scratchdimen=\dimen159
\scratchbox=\box53
\nofMPsegments=\count281
\nofMParguments=\count282
\everyMPshowfont=\toks28
\MPscratchCnt=\count283
\MPscratchDim=\dimen160
\MPnumerator=\count284
\makeMPintoPDFobject=\count285
\everyMPtoPDFconversion=\toks29
))) (/usr/share/texmf-dist/tex/latex/epstopdf-pkg/epstopdf-base.sty
Package: epstopdf-base 2020-01-24 v2.11 Base part for package epstopdf
Package epstopdf-base Info: Redefining graphics rule for `.eps' on input line 4
85.

(/usr/share/texmf-dist/tex/latex/latexconfig/epstopdf-sys.cfg
File: epstopdf-sys.cfg 2010/07/13 v1.3 Configuration of (r)epstopdf for TeX Liv
e
))
\Gin@req@height=\dimen161
\Gin@req@width=\dimen162
)
LaTeX Font Info:    Trying to load font information for U+msa on input line 37.


(/usr/share/texmf-dist/tex/latex/amsfonts/umsa.fd
File: umsa.fd 2013/01/14 v3.01 AMS symbols A
)
LaTeX Font Info:    Trying to load font information for U+msb on input line 37.


(/usr/share/texmf-dist/tex/latex/amsfonts/umsb.fd
File: umsb.fd 2013/01/14 v3.01 AMS symbols B
) [1

{/var/lib/texmf/fonts/map/pdftex/updmap/pdftex.map}] [2] [3] [4] [5] [6] [7] [8
] [9] [10] [11] [12]
[13] [14] [15] [16] [17] [18] [19] [20] [21] [22] [23] [24] [25] [26] [27]
[28] [29] [30] [31] [32]

! LaTeX Error: \verb illegal in command argument.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.1569 ...ng service channel steps for \verb|p2| }
                                                  
Try typing  <return>  to proceed.
If that doesn't work, type  X <return>  to quit.

! Argument of \@sect has an extra }.
<inserted text> 
                \par 
l.1569 ...ng service channel steps for \verb|p2| }
                                                  
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
{\normalfont \Large \bfseries }{\def \reserved@a *{\@sverb }\reserved@a \ETC.
! Paragraph ended before \@sect was complete.
<to be read again> 
                   \par 
l.1569 ...ng service channel steps for \verb|p2| }
                                                  
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

[33] [34
! Argument of \@gobble has an extra }.
<inserted text> 
                \par 
l.1662 \end{verbatim}
                     
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@gobble was complete.
<to be read again> 
                   \par 
l.1662 \end{verbatim}
                     
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \@gobble has an extra }.
<inserted text> 
                \par 
l.1662 \end{verbatim}
                     
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@gobble was complete.
<to be read again> 
                   \par 
l.1662 \end{verbatim}
                     
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \@makeother has an extra }.
<inserted text> 
                \par 
l.1662 \end{verbatim}
                     
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@makeother was complete.
<to be read again> 
                   \par 
l.1662 \end{verbatim}
                     
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \do@noligs has an extra }.
<inserted text> 
                \par 
l.1662 \end{verbatim}
                     
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \do@noligs was complete.
<to be read again> 
                   \par 
l.1662 \end{verbatim}
                     
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
<argument> \<
             
l.1662 \end{verbatim}
                     
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
<argument> \<
             
l.1662 \end{verbatim}
                     
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
<argument> \<
             
l.1662 \end{verbatim}
                     
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Argument of \@sverb has an extra }.
<inserted text> 
                \par 
l.1662 \end{verbatim}
                     
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@sverb was complete.
<to be read again> 
                   \par 
l.1662 \end{verbatim}
                     
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \@gobble has an extra }.
<inserted text> 
                \par 
l.1662 \end{verbatim}
                     
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@gobble was complete.
<to be read again> 
                   \par 
l.1662 \end{verbatim}
                     
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\frenchspacing ->\sfcode `\.1006\sfcode `\?
                                           1005\sfcode `\!1004\sfcode `\:100...
l.1662 \end{verbatim}
                     
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Argument of \@sverb has an extra }.
<inserted text> 
                \par 
l.1662 \end{verbatim}
                     
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@sverb was complete.
<to be read again> 
                   \par 
l.1662 \end{verbatim}
                     
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
<write> ...protect \ttfamily  \let \do@noligs \`\<
                                                  \>\,\'\-\language \l@nohyp...
l.1662 \end{verbatim}
                     
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

] [35] [36] [37] [38] [39] [40] [41] [42] [43]

! LaTeX Error: \verb illegal in command argument.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.2045 ...nd of boring service channel \verb|p2| }
                                                  
Try typing  <return>  to proceed.
If that doesn't work, type  X <return>  to quit.

! Argument of \@sect has an extra }.
<inserted text> 
                \par 
l.2045 ...nd of boring service channel \verb|p2| }
                                                  
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
{\normalfont \Large \bfseries }{\def \reserved@a *{\@sverb }\reserved@a \ETC.
! Paragraph ended before \@sect was complete.
<to be read again> 
                   \par 
l.2045 ...nd of boring service channel \verb|p2| }
                                                  
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

[44
! Argument of \@gobble has an extra }.
<inserted text> 
                \par 
l.2132 \end{verbatim}
                     
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@gobble was complete.
<to be read again> 
                   \par 
l.2132 \end{verbatim}
                     
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \@gobble has an extra }.
<inserted text> 
                \par 
l.2132 \end{verbatim}
                     
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@gobble was complete.
<to be read again> 
                   \par 
l.2132 \end{verbatim}
                     
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \@makeother has an extra }.
<inserted text> 
                \par 
l.2132 \end{verbatim}
                     
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@makeother was complete.
<to be read again> 
                   \par 
l.2132 \end{verbatim}
                     
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \do@noligs has an extra }.
<inserted text> 
                \par 
l.2132 \end{verbatim}
                     
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \do@noligs was complete.
<to be read again> 
                   \par 
l.2132 \end{verbatim}
                     
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
<argument> \<
             
l.2132 \end{verbatim}
                     
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
<argument> \<
             
l.2132 \end{verbatim}
                     
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
<argument> \<
             
l.2132 \end{verbatim}
                     
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Argument of \@sverb has an extra }.
<inserted text> 
                \par 
l.2132 \end{verbatim}
                     
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@sverb was complete.
<to be read again> 
                   \par 
l.2132 \end{verbatim}
                     
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \@gobble has an extra }.
<inserted text> 
                \par 
l.2132 \end{verbatim}
                     
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@gobble was complete.
<to be read again> 
                   \par 
l.2132 \end{verbatim}
                     
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\frenchspacing ->\sfcode `\.1006\sfcode `\?
                                           1005\sfcode `\!1004\sfcode `\:100...
l.2132 \end{verbatim}
                     
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Argument of \@sverb has an extra }.
<inserted text> 
                \par 
l.2132 \end{verbatim}
                     
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@sverb was complete.
<to be read again> 
                   \par 
l.2132 \end{verbatim}
                     
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
<write> ...protect \ttfamily  \let \do@noligs \`\<
                                                  \>\,\'\-\language \l@nohyp...
l.2132 \end{verbatim}
                     
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

] [45] [46] [47] [48] [49] [50] [51] [52] [53] [54] [55] [56] [57] [58]
[59] [60] [61] [62]
Overfull \hbox (11.99689pt too wide) in paragraph at lines 2977--2977
[]    \OT1/cmtt/m/n/10 proc p2_top :: | Passer(| Mem(Int|)) => IntTerminal, Mem
(Int|) =[] 
 []

[63] [64]
Overfull \hbox (11.99689pt too wide) in paragraph at lines 3075--3075
[]    \OT1/cmtt/m/n/10 proc p2_top :: | Passer(| Mem(Int|)) => IntTerminal, Mem
(Int|) =[] 
 []


Overfull \hbox (11.99689pt too wide) in paragraph at lines 3075--3075
[]    \OT1/cmtt/m/n/10 proc p2_bot :: | Passer(| Mem(Int|)) => IntTerminal, Mem
(Int|) =[] 
 []

[65] [66]
Overfull \hbox (11.99689pt too wide) in paragraph at lines 3178--3178
[]    \OT1/cmtt/m/n/10 proc p2_top :: | Passer(| Mem(Int|)) => IntTerminal, Mem
(Int|) =[] 
 []


Overfull \hbox (11.99689pt too wide) in paragraph at lines 3178--3178
[]    \OT1/cmtt/m/n/10 proc p2_bot :: | Passer(| Mem(Int|)) => IntTerminal, Mem
(Int|) =[] 
 []

[67] [68]
Overfull \hbox (11.99689pt too wide) in paragraph at lines 3299--3299
[]    \OT1/cmtt/m/n/10 proc p2_top :: | Passer(| Mem(Int|)) => IntTerminal, Mem
(Int|) =[] 
 []


Overfull \hbox (11.99689pt too wide) in paragraph at lines 3299--3299
[]    \OT1/cmtt/m/n/10 proc p2_bot :: | Passer(| Mem(Int|)) => IntTerminal, Mem
(Int|) =[] 
 []

[69] [70] [71]
Overfull \hbox (11.99689pt too wide) in paragraph at lines 3412--3412
[]    \OT1/cmtt/m/n/10 proc p2_bot :: | Passer(| Mem(Int|)) => IntTerminal, Mem
(Int|) =[] 
 []

[72] [73]
Overfull \hbox (11.99689pt too wide) in paragraph at lines 3527--3527
[]    \OT1/cmtt/m/n/10 proc p2_bot :: | Passer(| Mem(Int|)) => IntTerminal, Mem
(Int|) =[] 
 []

[74] [75] [76]
Overfull \hbox (11.99689pt too wide) in paragraph at lines 3630--3630
[]    \OT1/cmtt/m/n/10 proc p2_bot :: | Passer(| Mem(Int|)) => IntTerminal, Mem
(Int|) =[] 
 []

[77] [78]
Overfull \hbox (11.99689pt too wide) in paragraph at lines 3734--3734
[]    \OT1/cmtt/m/n/10 proc p2_bot :: | Passer(| Mem(Int|)) => IntTerminal, Mem
(Int|) =[] 
 []

[79] [80]
Overfull \hbox (11.99689pt too wide) in paragraph at lines 3847--3847
[]    \OT1/cmtt/m/n/10 proc p2_bot :: | Passer(| Mem(Int|)) => IntTerminal, Mem
(Int|) =[] 
 []

[81] [82] [83]
Overfull \hbox (11.99689pt too wide) in paragraph at lines 3961--3961
[]    \OT1/cmtt/m/n/10 proc p2_bot :: | Passer(| Mem(Int|)) => IntTerminal, Mem
(Int|) =[] 
 []

[84] [85]
Overfull \hbox (11.99689pt too wide) in paragraph at lines 4071--4071
[]    \OT1/cmtt/m/n/10 proc p2_bot :: | Passer(| Mem(Int|)) => IntTerminal, Mem
(Int|) =[] 
 []

[86]

! LaTeX Error: \verb illegal in command argument.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.4073 \section{boring \verb|p1| service step}
                                              
Try typing  <return>  to proceed.
If that doesn't work, type  X <return>  to quit.

! Argument of \@sect has an extra }.
<inserted text> 
                \par 
l.4073 \section{boring \verb|p1| service step}
                                              
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
{\normalfont \Large \bfseries }{\def \reserved@a *{\@sverb }\reserved@a \ETC.
! Paragraph ended before \@sect was complete.
<to be read again> 
                   \par 
l.4073 \section{boring \verb|p1| service step}
                                              
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

[87
! Argument of \@gobble has an extra }.
<inserted text> 
                \par 
l.4183 \end{verbatim}
                     
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@gobble was complete.
<to be read again> 
                   \par 
l.4183 \end{verbatim}
                     
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \@gobble has an extra }.
<inserted text> 
                \par 
l.4183 \end{verbatim}
                     
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@gobble was complete.
<to be read again> 
                   \par 
l.4183 \end{verbatim}
                     
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \@makeother has an extra }.
<inserted text> 
                \par 
l.4183 \end{verbatim}
                     
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@makeother was complete.
<to be read again> 
                   \par 
l.4183 \end{verbatim}
                     
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \do@noligs has an extra }.
<inserted text> 
                \par 
l.4183 \end{verbatim}
                     
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \do@noligs was complete.
<to be read again> 
                   \par 
l.4183 \end{verbatim}
                     
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
<argument> \<
             
l.4183 \end{verbatim}
                     
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
<argument> \<
             
l.4183 \end{verbatim}
                     
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
<argument> \<
             
l.4183 \end{verbatim}
                     
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Argument of \@sverb has an extra }.
<inserted text> 
                \par 
l.4183 \end{verbatim}
                     
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@sverb was complete.
<to be read again> 
                   \par 
l.4183 \end{verbatim}
                     
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \@gobble has an extra }.
<inserted text> 
                \par 
l.4183 \end{verbatim}
                     
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@gobble was complete.
<to be read again> 
                   \par 
l.4183 \end{verbatim}
                     
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\frenchspacing ->\sfcode `\.1006\sfcode `\?
                                           1005\sfcode `\!1004\sfcode `\:100...
l.4183 \end{verbatim}
                     
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Argument of \@sverb has an extra }.
<inserted text> 
                \par 
l.4183 \end{verbatim}
                     
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@sverb was complete.
<to be read again> 
                   \par 
l.4183 \end{verbatim}
                     
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
<write> ...protect \ttfamily  \let \do@noligs \`\<
                                                  \>\,\'\-\language \l@nohyp...
l.4183 \end{verbatim}
                     
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

]
Overfull \hbox (11.99689pt too wide) in paragraph at lines 4183--4183
[]    \OT1/cmtt/m/n/10 proc p2_bot :: | Passer(| Mem(Int|)) => IntTerminal, Mem
(Int|) =[] 
 []

[88] [89] [90]
Overfull \hbox (11.99689pt too wide) in paragraph at lines 4298--4298
[]    \OT1/cmtt/m/n/10 proc p2_bot :: | Passer(| Mem(Int|)) => IntTerminal, Mem
(Int|) =[] 
 []

[91] [92]
Overfull \hbox (11.99689pt too wide) in paragraph at lines 4416--4416
[]    \OT1/cmtt/m/n/10 proc p2_bot :: | Passer(| Mem(Int|)) => IntTerminal, Mem
(Int|) =[] 
 []

[93] [94] [95]
Overfull \hbox (11.99689pt too wide) in paragraph at lines 4535--4535
[]    \OT1/cmtt/m/n/10 proc p2_bot :: | Passer(| Mem(Int|)) => IntTerminal, Mem
(Int|) =[] 
 []

[96] [97]
Overfull \hbox (11.99689pt too wide) in paragraph at lines 4643--4643
[]    \OT1/cmtt/m/n/10 proc p2_bot :: | Passer(| Mem(Int|)) => IntTerminal, Mem
(Int|) =[] 
 []

[98] [99] [100]
Overfull \hbox (11.99689pt too wide) in paragraph at lines 4752--4752
[]    \OT1/cmtt/m/n/10 proc p2_bot :: | Passer(| Mem(Int|)) => IntTerminal, Mem
(Int|) =[] 
 []

[101] [102]
Overfull \hbox (11.99689pt too wide) in paragraph at lines 4862--4862
[]    \OT1/cmtt/m/n/10 proc p2_bot :: | Passer(| Mem(Int|)) => IntTerminal, Mem
(Int|) =[] 
 []

[103] [104]
Overfull \hbox (11.99689pt too wide) in paragraph at lines 4970--4970
[]    \OT1/cmtt/m/n/10 proc p2_bot :: | Passer(| Mem(Int|)) => IntTerminal, Mem
(Int|) =[] 
 []

[105] [106]
Overfull \hbox (11.99689pt too wide) in paragraph at lines 5068--5068
[]    \OT1/cmtt/m/n/10 proc p2_bot :: | Passer(| Mem(Int|)) => IntTerminal, Mem
(Int|) =[] 
 []

[107] [108] [109]
Overfull \hbox (11.99689pt too wide) in paragraph at lines 5165--5165
[]    \OT1/cmtt/m/n/10 proc p2_bot :: | Passer(| Mem(Int|)) => IntTerminal, Mem
(Int|) =[] 
 []

[110] [111]
Overfull \hbox (11.99689pt too wide) in paragraph at lines 5261--5261
[]    \OT1/cmtt/m/n/10 proc p2_bot :: | Passer(| Mem(Int|)) => IntTerminal, Mem
(Int|) =[] 
 []

[112] [113]
Overfull \hbox (11.99689pt too wide) in paragraph at lines 5367--5367
[]    \OT1/cmtt/m/n/10 proc p2_bot :: | Passer(| Mem(Int|)) => IntTerminal, Mem
(Int|) =[] 
 []

[114] [115]
Overfull \hbox (11.99689pt too wide) in paragraph at lines 5470--5470
[]    \OT1/cmtt/m/n/10 proc p2_bot :: | Passer(| Mem(Int|)) => IntTerminal, Mem
(Int|) =[] 
 []

[116] [117] [118] [119] [120] [121] [122] [123] [124] (./swappedneg.aux) ) 
Here is how much of TeX's memory you used:
 3720 strings out of 478994
 52559 string characters out of 5864752
 361028 words of memory out of 5000000
 21185 multiletter control sequences out of 15000+600000
 409624 words of font info for 51 fonts, out of 8000000 for 9000
 1141 hyphenation exceptions out of 8191
 70i,6n,77p,4755b,271s stack positions out of 5000i,500n,10000p,200000b,80000s
</usr
/share/texmf-dist/fonts/type1/public/amsfonts/cm/cmbx10.pfb></usr/share/texmf-d
ist/fonts/type1/public/amsfonts/cm/cmbx12.pfb></usr/share/texmf-dist/fonts/type
1/public/amsfonts/cm/cmr10.pfb></usr/share/texmf-dist/fonts/type1/public/amsfon
ts/cm/cmr12.pfb></usr/share/texmf-dist/fonts/type1/public/amsfonts/cm/cmr17.pfb
></usr/share/texmf-dist/fonts/type1/public/amsfonts/cm/cmtt10.pfb></usr/share/t
exmf-dist/fonts/type1/public/amsfonts/cm/cmtt12.pfb>
Output written on swappedneg.pdf (124 pages, 171672 bytes).
PDF statistics:
 432 PDF objects out of 1000 (max. 8388607)
 296 compressed objects within 3 object streams
 0 named destinations out of 1000 (max. 500000)
 1 words of extra memory for PDF output out of 10000 (max. 10000000)

