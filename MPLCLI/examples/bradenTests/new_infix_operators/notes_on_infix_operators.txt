
------------------------------------------------
USAGE
------------------------------------------------

Infix operators are operators that are placed between the things they operate on.
For example:

	fun (+++) =
		[],c -> c
		b:bs,c -> b:(bs +++ c)

Infix operators are declared like normal functions, but the name is surrounded by brackets:
(naming discussed later)

	fun (name) =
		...

Infix operators can have an explicit type, but they must take exactly 2 parameters (failure to do so produces a parsing error)

To use a user-defined infix operator, use it like any other infix operator:

	"abc" +++ "def"

Or, use it in a 'sectioned' form:

	(+++)("abc","def")

Any user-defined or inbuilt infix operator can be sectioned.

------------------------------------------------
ORDER OF OPERATIONS:
------------------------------------------------

Infix operators have the same precedence as the built-in operator corresponding to their starting symbol.
Below is a list of every infix operator. Each line represents a precedence.
All operators except the '^' row are left-associative.


    || (not implemented), any user-defined op starting with '|'
    
    && (not implemented), any user-defined op starting with '&'
    
    > (NI), /= (NI), ==, >=, <=, <, any user-defined op starting with '>','<','!'
    
    ++ (NI)
    
    +, -, any user-defined op starting with '+','-'
    
    % (NI), *, /, any user-defined op starting with '*','/','%'
    
    ^ (NI), any user-defined op starting with '^'. NOTE: right-associative
    
    !! (NI)

operators closer to the bottom bind more tightly.

------------------------------------------------
Naming:
------------------------------------------------

An infix operator name must start with one of the aforementioned symbols,
and be followed by a nonzero sequence of any of the following characters:

    @ # $ _ ? | : ~ = | & < > ! + - * / % ^

Please note that a token starting with '|' cannot contain a '=',
since this would cause any '|=>' to be treated as a single token.
Instead, we want this to be treated like '| =>', as this is usually what the programmer means.