:set -fwarn-incomplete-patterns
:set -isrc
:set -XTemplateHaskell 
:set -XDataKinds 
:set -XUndecidableInstances 
:set -XTypeFamilies 
:set -XMultiParamTypeClasses 
:set -XFlexibleInstances 
:set -XFunctionalDependencies 
:set -XDeriveGeneric 
:set -XDeriveFunctor 
:set -XDeriveFoldable 
:set -XDeriveTraversable 
:set -XFlexibleContexts
:set -XPartialTypeSignatures
:set -XOverloadedStrings
:set prompt "> "

import Optics
import Optics.State.Operators
import System.Process
import Control.Monad.State
import Control.Monad.Writer
import Control.Monad.Reader
import Control.Monad.Except
import Control.Monad.RWS
import Data.Maybe
import qualified Data.Bifunctor as Bifunctor
import Control.Arrow
import Data.List
import qualified Data.List.NonEmpty as NE
import GHC.Generics hiding ( to )
import Data.List.NonEmpty (NonEmpty (..))
import Control.Applicative
import Data.Bool
import Data.Function
import Data.Foldable
import Data.IORef
import Control.Concurrent hiding yield
import Control.Concurrent.Async
import Control.Exception
import System.Process

import qualified Data.Map as Map
import Data.Map (Map )
import qualified Data.Set as Set
import Data.Set (Set)

import Pipes
import Pipes.Core
import qualified Pipes.Prelude as P
-- import Pipes.Network.TCP
-- import Pipes.Binary
import qualified Pipes.Attoparsec as P
import qualified Pipes.Parse as P

import qualified Data.Attoparsec.ByteString.Char8 as A
import qualified Data.ByteString.Char8 as B

:set -interactive-print=Text.Pretty.Simple.pPrint
