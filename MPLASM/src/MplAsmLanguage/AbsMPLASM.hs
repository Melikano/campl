-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

module MplAsmLanguage.AbsMPLASM where

import Prelude (Char, Double, Int, Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)

newtype Store = Store ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Load = Load ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Ret = Ret ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Call = Call ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype CInt = CInt ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype CChar = CChar ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype CString = CString ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype ToStr = ToStr ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype ToInt = ToInt ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype And = And ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Or = Or ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Append = Append ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Unstring = Unstring ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype LeqI = LeqI ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype EqI = EqI ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype LeqC = LeqC ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype EqC = EqC ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Leqs = Leqs ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Eqs = Eqs ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype ConcatS = ConcatS ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Add = Add ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Subtract = Subtract ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Mul = Mul ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Quot = Quot ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Rem = Rem ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Case = Case ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype If = If ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Rec = Rec ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Get = Get ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Put = Put ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Hput = Hput ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Hcase = Hcase ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Split = Split ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Fork = Fork ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Plug = Plug ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Run = Run ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Race = Race ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Close = Close ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Halt = Halt ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Ch_Id = Ch_Id ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Main_run = Main_run ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype BTrue = BTrue ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype BFalse = BFalse ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Character = Character ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype UIdent = UIdent ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype PIdent = PIdent ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype PInteger = PInteger ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype IIdent = IIdent ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data AMPLCODE = Main [AmplConstructs] Main
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data AmplConstructs
    = IMPORT_CONSTRUCT Import
    | PROTOCOL_CONSTRUCT Protocols
    | COPROTOCOL_CONSTRUCT Coprotocols
    | CONSTRUCTOR_CONSTRUCT Constructors
    | DESTRUCTOR_CONSTRUCT Destructors
    | PROCESSES_CONSTRUCT Processes
    | FUNCTIONS_CONSTRUCT Functions
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ProtocolCoprotocolSpec
    = PROTOCOL_COPROTOCOL_SPEC UIdent [Handle]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Handle = HANDLE_NAME UIdent
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Import = IMPORT IIdent
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Constructors = CONSTRUCTORS [StructorSpec]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Destructors = DESTRUCTORS [StructorSpec]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data StructorSpec = STRUCT_SPEC UIdent [Struct]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Struct = STRUCT UIdent PInteger
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Protocols = PROTOCOLS [ProtocolCoprotocolSpec]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Coprotocols = COPROTOCOLS [ProtocolCoprotocolSpec]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Processes = PROCESSES [ProcessesSpec]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ProcessesSpec
    = PROCESS_SPEC PIdent [PIdent] [PIdent] [PIdent] Coms
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Functions = FUNCTIONS [FunctionsSpec]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data FunctionsSpec = FUNCTION_SPEC PIdent [PIdent] Coms
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Main = MAIN Main_run MainChannels Coms | NO_MAIN
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data MainChannels = MAIN_CHANNELS [PIdent] [PIdent]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Coms = Prog [Com]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Com
    = AC_ASSIGN PIdent Com
    | AC_LOAD Load PIdent
    | AC_RET Ret
    | AC_CALL_FUN Call PIdent [PIdent]
    | AC_INT CInt PInteger
    | AC_CHAR CChar Character
    | AC_STRING CString String
    | AC_TOSTR ToStr
    | AC_TOINT ToInt
    | AC_AND And
    | AC_OR Or
    | AC_APPEND Append
    | AC_TRUE BTrue
    | AC_FALSE BFalse
    | AC_UNSTRING Unstring
    | AC_LEQ LeqI
    | AC_EQI EqI
    | AC_LEQC LeqC
    | AC_EQC EqC
    | AC_LEQS Leqs
    | AC_EQS Eqs
    | AC_CONCAT ConcatS Integer
    | AC_ADD Add
    | AC_SUB Subtract
    | AC_MUL Mul
    | AC_DIVQ Quot
    | AC_DIVR Rem
    | AC_CONSTRUCTOR UIdent UIdent
    | AC_CONSTRUCTOR_ARGS UIdent UIdent [PIdent]
    | AC_CASE Case PIdent [LabelledComs]
    | AC_IF If PIdent Coms Coms
    | AC_RECORD Rec [LabelledComs]
    | AC_DEST UIdent UIdent PIdent
    | AC_DEST_ARGS UIdent UIdent [PIdent] PIdent
    | AC_PROD [PIdent]
    | AC_PRODELEM PInteger PIdent
    | AC_EMSG String
    | AC_GET Get PIdent PIdent
    | AC_PUT Put PIdent PIdent
    | AC_HPUT Hput UIdent UIdent PIdent
    | AC_HCASE Hcase PIdent [LabelledComs]
    | AC_SPLIT Split PIdent PIdent PIdent
    | AC_FORK Fork PIdent PIdent [PIdent] Coms PIdent [PIdent] Coms
    | AC_PLUG Plug [PIdent] [PIdent] Coms [PIdent] Coms
    | AC_RUN Run PIdent [PIdent] [PIdent] [PIdent]
    | AC_ID PIdent Ch_Id PIdent
    | AC_RACE Race [RACE_PHRASE]
    | AC_CLOSE Close PIdent
    | AC_HALT Halt PIdent
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LabelledComs
    = AC_LABELLED_COMS_NO_ARGS UIdent UIdent Coms
    | AC_LABELLED_COMS UIdent UIdent [PIdent] Coms
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data RACE_PHRASE = AC_RACE_PHRASE PIdent Coms
  deriving (C.Eq, C.Ord, C.Show, C.Read)

